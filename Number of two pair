Number of two pair
Input: nums = [1,2,3,1,1,3]
Output: 4
Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed
class Solution:
    def numIdenticalPairs(self, nums: List[int]) -> int:
    
        d = {}
        res = 0
        for num in nums:            
            if num in d:#{1:1+1+1,2:1,3:1+1}
                res += d[num] #1+2+1=4
                d[num] += 1
            else:
                d[num] = 1
        return res
 2nd method-->
        d={}
        for i in nums:
            if i in d:
                d[i]+=1
            else:
                d[i]=1
        for i in d:
            if d[i]>1:
                count+=(d[i]*(d[i]-1)//2)
        return count
        d={1:3,2:1,3:2)
        3c2+1c2+2c2=3!/2!*1!  + 1!/2!*-1! +2!/2!*0! =3+0+1
        nc2=(n(n-1))/2 = (3*2)/2 =3
 java
 class Solution {
    public int numIdenticalPairs(int[] nums) {
        nums = [1,2,3,1,1,3]   
        int pair=0;                    [0 1 2 3 4 5 6 7 8 9.........]=
        int [] freq = new int [101]; //[1,1,1,2,3,1]
        for (int num:nums){       
            freq[num]++;
            System.out.println(freq[num]);
        }
        for (int i:freq){
            pair+=(i*(i-1))/2;
            
        }return pair;
    }
    
        int pair=0;                    [0 1 2 3 4 5 6 7 8 9.........]=
        int [] freq = new int [101]; //[1,1,1,2,3,1]
        for (int num:nums){       
            count+=freq[num]++; //1+2+1
            
        }return count;
    
    
    int count=0;
        HashMap <Integer, Integer> map=new HashMap<>();
        for (int i=0;i<nums.length;i++){
            if (map.containsKey(nums[i])){
            int val=map.get(nums[i]);
            map.put(nums[i],val+1);
        }else{
            map.put(nums[i],1);
        }
        }
        for (Map.Entry<Integer , Integer>set : map.entrySet()){
            int val=set.getValue();
            count+=(val*(val-1))/2;
        }
            return count;
}
